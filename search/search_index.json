{"config":{"lang":["en","ja"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#yival","title":"YiVal","text":""},{"location":"#introduction","title":"Introduction","text":"<p>YiVal is an innovative open-source project, rooted in the principles of the Yijing, focused on revolutionizing the end-to-end evaluation process of AI models. We aim to provide comprehensive insights into not only the individual components such as models and prompts but more importantly, the final output produced by their interaction.</p>"},{"location":"#using-yival-for-auto-prompt-generation","title":"Using Yival for auto prompt generation","text":""},{"location":"#roadmap","title":"Roadmap","text":"<p>Qian (The Creative, Heaven) \ud83c\udf24\ufe0f (\u4e7e):</p> <ul> <li> Setup the framework for wrappers that can be used directly     in the production code.<ul> <li> Set up the BaseWrapper</li> <li> Set up the StringWrapper</li> </ul> </li> <li> Setup the config framework</li> <li> Setup the experiment main function</li> <li> Setup the evaluator framework to do evaluations<ul> <li> One auto-evaluator</li> <li> Ground truth matching</li> <li> Human evaluator</li> </ul> </li> <li> Interactive evaluator</li> <li> Reader framework that be able to process different data<ul> <li> One reader from csv</li> </ul> </li> <li> Output parser - Capture detailed information</li> <li> Documents</li> <li> Git setup</li> <li> Cotribution guide</li> <li> End2End Examples</li> <li> Release</li> </ul>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#change-log","title":"Change Log","text":""},{"location":"changelog/#010","title":"0.1.0","text":"<p>Qian (The Creative, Heaven) \ud83c\udf24\ufe0f (\u4e7e):</p> <ul> <li> Setup the framework for wrappers that can be used directly     in the production code.<ul> <li> Set up the BaseWrapper</li> <li> Set up the StringWrapper</li> </ul> </li> <li> Setup the config framework</li> <li> Setup the experiment main function</li> <li> Setup the evaluator framework to do evaluations<ul> <li> One auto-evaluator</li> <li> Ground truth matching</li> <li> Human evaluator</li> </ul> </li> <li> Interactive evaluator</li> <li> Reader framework that be able to process different data<ul> <li> One reader from csv</li> </ul> </li> <li> Output formatter<ul> <li> Output to csv</li> <li> Basic Textual UI</li> </ul> </li> <li> Output parser - Capture detailed information</li> <li> Documents</li> <li> Git setup</li> <li> Cotribution guid</li> <li> End2End Examples</li> <li> Release</li> </ul>"},{"location":"contributing/","title":"Contributing Guide","text":""},{"location":"contributing/#preparation","title":"Preparation","text":"<p>You need an Python 3.10+ environment with poetry.</p> <p>Example</p> LinuxMac OSWindowsOther <p>For example, in Ubuntu 22.04, you can run:</p> <pre><code>sudo apt install python3-pip\nsudo pip install poetry\n</code></pre> <pre><code>brew install python@3.10\n\nbrew install poetry\n# Or\npython3 -m pip install --user poetry\n</code></pre> <p>Download exe installer from python.org, or use Chocolatey :</p> <pre><code>choco install python\npython3 -m pip install poetry\n</code></pre> <p>There should be a reboot.</p> <p>See poetry document for installation guide.</p>"},{"location":"contributing/#setup","title":"Setup","text":"<p>Initialize a Python virtual environment with <code>poetry</code>:</p> <pre><code>poetry install --sync\n</code></pre>"},{"location":"contributing/#development","title":"Development","text":"<p>A vscode is recommended. There are some configurations in <code>.vscode/</code> of this project.</p> <p>The commands below should be executed inside <code>poetry shell</code>, or with prefix <code>poetry run</code>.</p>"},{"location":"contributing/#test","title":"Test","text":"<pre><code>pytest\n</code></pre>"},{"location":"contributing/#mkdocs","title":"Mkdocs","text":"<p>Preview the docs locally:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"code/configs/config_utils/","title":"yival.configs.config_utils","text":""},{"location":"code/configs/config_utils/#yival.configs.config_utils.load_and_validate_config","title":"<code>load_and_validate_config(config_filepath)</code>","text":"<p>Load and validate the experiment configuration directly from a specified filepath.</p> Source code in <code>src/yival/configs/config_utils.py</code> <pre><code>def load_and_validate_config(config_filepath: str) -&gt; ExperimentConfig:\n\"\"\"\n    Load and validate the experiment configuration directly from a specified filepath.\n    \"\"\"\n\n    # Load the configuration directly from the specified filepath\n    dict_config = OmegaConf.load(config_filepath)\n\n    # Convert the DictConfig to ExperimentConfig and cast it\n    config = cast(ExperimentConfig, OmegaConf.to_object(dict_config))\n\n    return config\n</code></pre>"}]}